translation_unit: NEWLINE END
##
## Ends in an error in state: 3.
##
## translation_unit -> option(NEWLINE) . list(fxn) EOF [ # ]
##
## The known suffix of the stack is as follows:
## option(NEWLINE)
##

expected `Sub`

translation_unit: SUB ID LPAREN RPAREN NEWLINE DIM ID AS ID EQ WEST WHILE
##
## Ends in an error in state: 56.
##
## arith_expr -> expr . AND expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . OR expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . DOT expr [ OR NEWLINE DOT AND ]
## stmt -> DIM ID AS ID EQ expr . NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## DIM ID AS ID EQ expr
##

expected either a new line, `,`, or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE DIM ID AS ID EQ WHILE
##
## Ends in an error in state: 55.
##
## stmt -> DIM ID AS ID EQ . expr NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## DIM ID AS ID EQ
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE DIM ID AS ID WHILE
##
## Ends in an error in state: 54.
##
## stmt -> DIM ID AS ID . EQ expr NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## DIM ID AS ID
##

expected `=`

translation_unit: SUB ID LPAREN RPAREN NEWLINE DIM ID AS WHILE
##
## Ends in an error in state: 53.
##
## stmt -> DIM ID AS . ID EQ expr NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## DIM ID AS
##

expected identifier

translation_unit: SUB ID LPAREN RPAREN NEWLINE DIM ID WHILE
##
## Ends in an error in state: 52.
##
## stmt -> DIM ID . AS ID EQ expr NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## DIM ID
##

expected `as`

translation_unit: SUB ID LPAREN RPAREN NEWLINE DIM WHILE
##
## Ends in an error in state: 51.
##
## stmt -> DIM . ID AS ID EQ expr NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## DIM
##

expected identifier

translation_unit: SUB ID LPAREN RPAREN NEWLINE END SUB NEWLINE WHILE
##
## Ends in an error in state: 99.
##
## list(fxn) -> fxn . list(fxn) [ EOF ]
##
## The known suffix of the stack is as follows:
## fxn
##

expected `Sub`

translation_unit: SUB ID LPAREN RPAREN NEWLINE END SUB WHILE
##
## Ends in an error in state: 95.
##
## fxn -> SUB ID LPAREN RPAREN NEWLINE block END SUB . NEWLINE [ SUB EOF ]
##
## The known suffix of the stack is as follows:
## SUB ID LPAREN RPAREN NEWLINE block END SUB
##

expected new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE END WHILE
##
## Ends in an error in state: 94.
##
## fxn -> SUB ID LPAREN RPAREN NEWLINE block END . SUB NEWLINE [ SUB EOF ]
##
## The known suffix of the stack is as follows:
## SUB ID LPAREN RPAREN NEWLINE block END
##

expected `End Sub`

translation_unit: SUB ID LPAREN RPAREN NEWLINE ID LPAREN WEST COMMA WHILE
##
## Ends in an error in state: 37.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE ID LPAREN WEST WHILE
##
## Ends in an error in state: 29.
##
## arith_expr -> expr . AND expr [ RPAREN OR DOT COMMA AND ]
## arith_expr -> expr . OR expr [ RPAREN OR DOT COMMA AND ]
## arith_expr -> expr . DOT expr [ RPAREN OR DOT COMMA AND ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

expected either an additional argument or a `)`

translation_unit: SUB ID LPAREN RPAREN NEWLINE ID LPAREN WHILE
##
## Ends in an error in state: 21.
##
## expr -> ID LPAREN . arguments RPAREN [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

expected either an argument or a `)`

translation_unit: SUB ID LPAREN RPAREN NEWLINE ID WHILE
##
## Ends in an error in state: 20.
##
## expr -> ID . LPAREN arguments RPAREN [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## primary_expr -> ID . [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID
##

expected either function application, an operator, or a new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSE NEWLINE END IF WHILE
##
## Ends in an error in state: 86.
##
## stmt -> IF expr THEN NEWLINE block ELSE NEWLINE block END IF . NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN NEWLINE block ELSE NEWLINE block END IF
##

expected a new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSE NEWLINE END WHILE
##
## Ends in an error in state: 85.
##
## stmt -> IF expr THEN NEWLINE block ELSE NEWLINE block END . IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN NEWLINE block ELSE NEWLINE block END
##

expected `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSE NEWLINE THEN
##
## Ends in an error in state: 83.
##
## stmt -> IF expr THEN NEWLINE block ELSE NEWLINE . block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN NEWLINE block ELSE NEWLINE
##

expected `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSE NEWLINE WEST NEWLINE ELSEIF
##
## Ends in an error in state: 84.
##
## stmt -> IF expr THEN NEWLINE block ELSE NEWLINE block . END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN NEWLINE block ELSE NEWLINE block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production list(stmt) ->
## In state 59, spurious reduction of production list(stmt) -> stmt list(stmt)
## In state 62, spurious reduction of production block -> list(stmt)
##

expected either a statement or an `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSE WHILE
##
## Ends in an error in state: 82.
##
## stmt -> IF expr THEN NEWLINE block ELSE . NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN NEWLINE block ELSE
##

expected new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST THEN NEWLINE ELSE NEWLINE END IF WHILE
##
## Ends in an error in state: 79.
##
## elseif_stmt -> ELSEIF expr THEN NEWLINE block ELSE NEWLINE block END IF . NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr THEN NEWLINE block ELSE NEWLINE block END IF
##

expected new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST THEN NEWLINE ELSE NEWLINE END WHILE
##
## Ends in an error in state: 78.
##
## elseif_stmt -> ELSEIF expr THEN NEWLINE block ELSE NEWLINE block END . IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr THEN NEWLINE block ELSE NEWLINE block END
##

expected `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST THEN NEWLINE ELSE NEWLINE THEN
##
## Ends in an error in state: 76.
##
## elseif_stmt -> ELSEIF expr THEN NEWLINE block ELSE NEWLINE . block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr THEN NEWLINE block ELSE NEWLINE
##

expected either a statement or an `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST THEN NEWLINE ELSE NEWLINE WEST NEWLINE ELSEIF
##
## Ends in an error in state: 77.
##
## elseif_stmt -> ELSEIF expr THEN NEWLINE block ELSE NEWLINE block . END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr THEN NEWLINE block ELSE NEWLINE block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production list(stmt) ->
## In state 59, spurious reduction of production list(stmt) -> stmt list(stmt)
## In state 62, spurious reduction of production block -> list(stmt)
##

expected either a statement or an `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST THEN NEWLINE ELSE WHILE
##
## Ends in an error in state: 75.
##
## elseif_stmt -> ELSEIF expr THEN NEWLINE block ELSE . NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr THEN NEWLINE block ELSE
##

expected new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST THEN NEWLINE END IF WHILE
##
## Ends in an error in state: 73.
##
## elseif_stmt -> ELSEIF expr THEN NEWLINE block END IF . NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr THEN NEWLINE block END IF
##

expected new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST THEN NEWLINE END WHILE
##
## Ends in an error in state: 72.
##
## elseif_stmt -> ELSEIF expr THEN NEWLINE block END . IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr THEN NEWLINE block END
##

expected `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST THEN NEWLINE THEN
##
## Ends in an error in state: 70.
##
## elseif_stmt -> ELSEIF expr THEN NEWLINE . block elseif_stmt [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## elseif_stmt -> ELSEIF expr THEN NEWLINE . block ELSE NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## elseif_stmt -> ELSEIF expr THEN NEWLINE . block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr THEN NEWLINE
##

expected a statement or an `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST THEN WHILE
##
## Ends in an error in state: 69.
##
## elseif_stmt -> ELSEIF expr THEN . NEWLINE block elseif_stmt [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## elseif_stmt -> ELSEIF expr THEN . NEWLINE block ELSE NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## elseif_stmt -> ELSEIF expr THEN . NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr THEN
##

expected new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WEST WHILE
##
## Ends in an error in state: 68.
##
## arith_expr -> expr . AND expr [ THEN OR DOT AND ]
## arith_expr -> expr . OR expr [ THEN OR DOT AND ]
## arith_expr -> expr . DOT expr [ THEN OR DOT AND ]
## elseif_stmt -> ELSEIF expr . THEN NEWLINE block elseif_stmt [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## elseif_stmt -> ELSEIF expr . THEN NEWLINE block ELSE NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## elseif_stmt -> ELSEIF expr . THEN NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF expr
##

expected one of `then`, `.`, or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE ELSEIF WHILE
##
## Ends in an error in state: 67.
##
## elseif_stmt -> ELSEIF . expr THEN NEWLINE block elseif_stmt [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## elseif_stmt -> ELSEIF . expr THEN NEWLINE block ELSE NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## elseif_stmt -> ELSEIF . expr THEN NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSEIF
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE END IF WHILE
##
## Ends in an error in state: 65.
##
## stmt -> IF expr THEN NEWLINE block END IF . NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN NEWLINE block END IF
##

expected new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE END WHILE
##
## Ends in an error in state: 64.
##
## stmt -> IF expr THEN NEWLINE block END . IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN NEWLINE block END
##

expected `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN NEWLINE THEN
##
## Ends in an error in state: 50.
##
## stmt -> IF expr THEN NEWLINE . block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## stmt -> IF expr THEN NEWLINE . block elseif_stmt [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## stmt -> IF expr THEN NEWLINE . block ELSE NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN NEWLINE
##

expected either a statement, an `ElseIf` block, or an `End If`

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST THEN WHILE
##
## Ends in an error in state: 49.
##
## stmt -> IF expr THEN . NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## stmt -> IF expr THEN . NEWLINE block elseif_stmt [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## stmt -> IF expr THEN . NEWLINE block ELSE NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

expected new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WEST WHILE
##
## Ends in an error in state: 48.
##
## arith_expr -> expr . AND expr [ THEN OR DOT AND ]
## arith_expr -> expr . OR expr [ THEN OR DOT AND ]
## arith_expr -> expr . DOT expr [ THEN OR DOT AND ]
## stmt -> IF expr . THEN NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## stmt -> IF expr . THEN NEWLINE block elseif_stmt [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## stmt -> IF expr . THEN NEWLINE block ELSE NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr
##

expected one of `then`, `.`, or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE IF WHILE
##
## Ends in an error in state: 47.
##
## stmt -> IF . expr THEN NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## stmt -> IF . expr THEN NEWLINE block elseif_stmt [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
## stmt -> IF . expr THEN NEWLINE block ELSE NEWLINE block END IF NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## IF
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE LPAREN WEST WHILE
##
## Ends in an error in state: 41.
##
## arith_expr -> expr . AND expr [ RPAREN OR DOT AND ]
## arith_expr -> expr . OR expr [ RPAREN OR DOT AND ]
## arith_expr -> expr . DOT expr [ RPAREN OR DOT AND ]
## primary_expr -> LPAREN expr . RPAREN [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

expected one of `)`, `.`, or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE LPAREN WHILE
##
## Ends in an error in state: 17.
##
## primary_expr -> LPAREN . expr RPAREN [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE NEW WEST WHILE
##
## Ends in an error in state: 43.
##
## arith_expr -> expr . AND expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr . OR expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr . DOT expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> NEW expr . [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## NEW expr
##

expected either a new line or one of `.`, or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE NEW WHILE
##
## Ends in an error in state: 16.
##
## arith_expr -> NEW . expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## NEW
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE NOT WEST WHILE
##
## Ends in an error in state: 44.
##
## arith_expr -> expr . AND expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr . OR expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr . DOT expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> NOT expr . [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## NOT expr
##

expected either a new line or one of `.`, or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE NOT WHILE
##
## Ends in an error in state: 14.
##
## arith_expr -> NOT . expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE THEN
##
## Ends in an error in state: 8.
##
## fxn -> SUB ID LPAREN RPAREN NEWLINE . block END SUB NEWLINE [ SUB EOF ]
##
## The known suffix of the stack is as follows:
## SUB ID LPAREN RPAREN NEWLINE
##

expected either a statement or an `End Sub`

translation_unit: SUB ID LPAREN RPAREN NEWLINE WEST AND WEST WHILE
##
## Ends in an error in state: 36.
##
## arith_expr -> expr . AND expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr AND expr . [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr . OR expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr . DOT expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

expected one of `.` or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE WEST AND WHILE
##
## Ends in an error in state: 35.
##
## arith_expr -> expr AND . expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE WEST DOT WHILE
##
## Ends in an error in state: 32.
##
## arith_expr -> expr DOT . expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE WEST NEWLINE ELSEIF
##
## Ends in an error in state: 93.
##
## fxn -> SUB ID LPAREN RPAREN NEWLINE block . END SUB NEWLINE [ SUB EOF ]
##
## The known suffix of the stack is as follows:
## SUB ID LPAREN RPAREN NEWLINE block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production list(stmt) ->
## In state 59, spurious reduction of production list(stmt) -> stmt list(stmt)
## In state 62, spurious reduction of production block -> list(stmt)
##

expected either a statement or an `End Sub`

translation_unit: SUB ID LPAREN RPAREN NEWLINE WEST NEWLINE THEN
##
## Ends in an error in state: 58.
##
## list(stmt) -> stmt . list(stmt) [ END ELSEIF ELSE ]
##
## The known suffix of the stack is as follows:
## stmt
##

expected statement or an end clause

translation_unit: SUB ID LPAREN RPAREN NEWLINE WEST OR WEST WHILE
##
## Ends in an error in state: 31.
##
## arith_expr -> expr . AND expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr . OR expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr OR expr . [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
## arith_expr -> expr . DOT expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

expected one of `.` or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE WEST OR WHILE
##
## Ends in an error in state: 30.
##
## arith_expr -> expr OR . expr [ THEN RPAREN OR NEWLINE DOT COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR
##

expected expression

translation_unit: SUB ID LPAREN RPAREN NEWLINE WEST WHILE
##
## Ends in an error in state: 60.
##
## arith_expr -> expr . AND expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . OR expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . DOT expr [ OR NEWLINE DOT AND ]
## stmt -> expr . NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## expr
##

expected one of `.` or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE WHILE WEST NEWLINE END WEST
##
## Ends in an error in state: 90.
##
## stmt -> WHILE expr NEWLINE block END . WHILE NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## WHILE expr NEWLINE block END
##

expected `End While`

translation_unit: SUB ID LPAREN RPAREN NEWLINE WHILE WEST NEWLINE END WHILE WHILE
##
## Ends in an error in state: 91.
##
## stmt -> WHILE expr NEWLINE block END WHILE . NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## WHILE expr NEWLINE block END WHILE
##

expected new line

translation_unit: SUB ID LPAREN RPAREN NEWLINE WHILE WEST NEWLINE THEN
##
## Ends in an error in state: 46.
##
## stmt -> WHILE expr NEWLINE . block END WHILE NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## WHILE expr NEWLINE
##

expected either a statement or an `End While`

translation_unit: SUB ID LPAREN RPAREN NEWLINE WHILE WEST NEWLINE WEST NEWLINE ELSEIF
##
## Ends in an error in state: 89.
##
## stmt -> WHILE expr NEWLINE block . END WHILE NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## WHILE expr NEWLINE block
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production list(stmt) ->
## In state 59, spurious reduction of production list(stmt) -> stmt list(stmt)
## In state 62, spurious reduction of production block -> list(stmt)
##

expected either a statement or an `End While`

translation_unit: SUB ID LPAREN RPAREN NEWLINE WHILE WEST WHILE
##
## Ends in an error in state: 45.
##
## arith_expr -> expr . AND expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . OR expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . DOT expr [ OR NEWLINE DOT AND ]
## stmt -> WHILE expr . NEWLINE block END WHILE NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## WHILE expr
##

expected either a new line, `.`, or an operator

translation_unit: SUB ID LPAREN RPAREN NEWLINE WHILE WHILE
##
## Ends in an error in state: 9.
##
## stmt -> WHILE . expr NEWLINE block END WHILE NEWLINE [ WHILE WEST TRUE SOUTH RIGHT NOT NORTH NEW LPAREN LEFT INT IF ID HERE FALSE END ELSEIF ELSE EAST DIM AHEAD ]
##
## The known suffix of the stack is as follows:
## WHILE
##

expected expression

translation_unit: SUB ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 7.
##
## fxn -> SUB ID LPAREN RPAREN . NEWLINE block END SUB NEWLINE [ SUB EOF ]
##
## The known suffix of the stack is as follows:
## SUB ID LPAREN RPAREN
##

expected new line

translation_unit: SUB ID LPAREN WHILE
##
## Ends in an error in state: 6.
##
## fxn -> SUB ID LPAREN . RPAREN NEWLINE block END SUB NEWLINE [ SUB EOF ]
##
## The known suffix of the stack is as follows:
## SUB ID LPAREN
##

expected `)`

translation_unit: SUB ID WHILE
##
## Ends in an error in state: 5.
##
## fxn -> SUB ID . LPAREN RPAREN NEWLINE block END SUB NEWLINE [ SUB EOF ]
##
## The known suffix of the stack is as follows:
## SUB ID
##

expected `(`

translation_unit: SUB WHILE
##
## Ends in an error in state: 4.
##
## fxn -> SUB . ID LPAREN RPAREN NEWLINE block END SUB NEWLINE [ SUB EOF ]
##
## The known suffix of the stack is as follows:
## SUB
##

expected identifier

translation_unit: WHILE
##
## Ends in an error in state: 0.
##
## translation_unit' -> . translation_unit [ # ]
##
## The known suffix of the stack is as follows:
##
##

expected `Sub`
