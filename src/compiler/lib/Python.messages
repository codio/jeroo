main_fxn: ID EQ WEST WHILE
##
## Ends in an error in state: 49.
##
## arith_expr -> expr . AND expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . OR expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . DOT expr [ OR NEWLINE DOT AND ]
## assignment_stmt -> ID EQ expr . NEWLINE [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF ELSE ELIF EAST DEF DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## ID EQ expr
##

expected either a newline or an operator

main_fxn: ID EQ WHILE
##
## Ends in an error in state: 48.
##
## assignment_stmt -> ID EQ . expr NEWLINE [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF ELSE ELIF EAST DEF DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## ID EQ
##

expected an expression

main_fxn: ID LPAREN WEST COMMA WHILE
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

expected an expression

main_fxn: ID LPAREN WEST WHILE
##
## Ends in an error in state: 27.
##
## arith_expr -> expr . AND expr [ RPAREN OR DOT COMMA AND ]
## arith_expr -> expr . OR expr [ RPAREN OR DOT COMMA AND ]
## arith_expr -> expr . DOT expr [ RPAREN OR DOT COMMA AND ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

expected either `)` or `,`

main_fxn: ID LPAREN WHILE
##
## Ends in an error in state: 19.
##
## expr -> ID LPAREN . arguments RPAREN [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

expected comma seperated arguments list followed by a `)`

main_fxn: ID WHILE
##
## Ends in an error in state: 47.
##
## assignment_stmt -> ID . EQ expr NEWLINE [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF ELSE ELIF EAST DEF DEDENT AHEAD ]
## expr -> ID . LPAREN arguments RPAREN [ OR NEWLINE DOT AND ]
## primary_expr -> ID . [ OR NEWLINE DOT AND ]
##
## The known suffix of the stack is as follows:
## ID
##

expected either an `=` or an operator

main_fxn: IF WEST COLON NEWLINE INDENT RPAREN
##
## Ends in an error in state: 43.
##
## suite -> NEWLINE INDENT . nonempty_list(stmt) DEDENT [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF ELSE ELIF EAST DEF DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## NEWLINE INDENT
##

expected a statement

main_fxn: IF WEST COLON NEWLINE INDENT WEST NEWLINE RPAREN
##
## Ends in an error in state: 73.
##
## nonempty_list(stmt) -> stmt . [ DEDENT ]
## nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ DEDENT ]
##
## The known suffix of the stack is as follows:
## stmt
##

expected either a dedent or a statement

main_fxn: IF WEST COLON NEWLINE WHILE
##
## Ends in an error in state: 42.
##
## suite -> NEWLINE . INDENT nonempty_list(stmt) DEDENT [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF ELSE ELIF EAST DEF DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

expected either a statement or a new indentation level

main_fxn: IF WEST COLON WEST NEWLINE ELIF WEST COLON WEST NEWLINE RPAREN
##
## Ends in an error in state: 67.
##
## elseif_stmts -> ELIF expr COLON suite . elseif_stmts [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## elseif_stmts -> ELIF expr COLON suite . [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## elseif_stmts -> ELIF expr COLON suite . else_stmt [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## ELIF expr COLON suite
##

expected either a statement, `elif`, or `else`

main_fxn: IF WEST COLON WEST NEWLINE ELIF WEST COLON WHILE
##
## Ends in an error in state: 66.
##
## elseif_stmts -> ELIF expr COLON . suite elseif_stmts [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## elseif_stmts -> ELIF expr COLON . suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## elseif_stmts -> ELIF expr COLON . suite else_stmt [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## ELIF expr COLON
##

expected either a statement or a new indentation level

main_fxn: IF WEST COLON WEST NEWLINE ELIF WEST WHILE
##
## Ends in an error in state: 65.
##
## arith_expr -> expr . AND expr [ OR DOT COLON AND ]
## arith_expr -> expr . OR expr [ OR DOT COLON AND ]
## arith_expr -> expr . DOT expr [ OR DOT COLON AND ]
## elseif_stmts -> ELIF expr . COLON suite elseif_stmts [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## elseif_stmts -> ELIF expr . COLON suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## elseif_stmts -> ELIF expr . COLON suite else_stmt [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## ELIF expr
##

expected either `:` or an operator

main_fxn: IF WEST COLON WEST NEWLINE ELIF WHILE
##
## Ends in an error in state: 64.
##
## elseif_stmts -> ELIF . expr COLON suite elseif_stmts [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## elseif_stmts -> ELIF . expr COLON suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## elseif_stmts -> ELIF . expr COLON suite else_stmt [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## ELIF
##

expected expression

main_fxn: IF WEST COLON WEST NEWLINE ELSE COLON WHILE
##
## Ends in an error in state: 62.
##
## else_stmt -> ELSE COLON . suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSE COLON
##

expected either a statement or a new indentation level

main_fxn: IF WEST COLON WEST NEWLINE ELSE WHILE
##
## Ends in an error in state: 61.
##
## else_stmt -> ELSE . COLON suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## ELSE
##

expected `:`

main_fxn: IF WEST COLON WEST NEWLINE RPAREN
##
## Ends in an error in state: 60.
##
## if_stmt -> IF expr COLON suite . [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## if_stmt -> IF expr COLON suite . else_stmt [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## if_stmt -> IF expr COLON suite . elseif_stmts [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr COLON suite
##

expected either a statement, `elif`, or `else`

main_fxn: IF WEST COLON WHILE
##
## Ends in an error in state: 59.
##
## if_stmt -> IF expr COLON . suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## if_stmt -> IF expr COLON . suite else_stmt [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## if_stmt -> IF expr COLON . suite elseif_stmts [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr COLON
##

expected either a statement or a newline followed by a new indentation level

main_fxn: IF WEST WHILE
##
## Ends in an error in state: 58.
##
## arith_expr -> expr . AND expr [ OR DOT COLON AND ]
## arith_expr -> expr . OR expr [ OR DOT COLON AND ]
## arith_expr -> expr . DOT expr [ OR DOT COLON AND ]
## if_stmt -> IF expr . COLON suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## if_stmt -> IF expr . COLON suite else_stmt [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## if_stmt -> IF expr . COLON suite elseif_stmts [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## IF expr
##

expected either `:` or an operator

main_fxn: IF WHILE
##
## Ends in an error in state: 57.
##
## if_stmt -> IF . expr COLON suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## if_stmt -> IF . expr COLON suite else_stmt [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
## if_stmt -> IF . expr COLON suite elseif_stmts [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## IF
##

expected expression

main_fxn: LPAREN ID WHILE
##
## Ends in an error in state: 18.
##
## expr -> ID . LPAREN arguments RPAREN [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## primary_expr -> ID . [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## ID
##

expected one of either `(` comma seperated arguments list `)`, newline, operator, or an `)`

main_fxn: LPAREN WEST WHILE
##
## Ends in an error in state: 39.
##
## arith_expr -> expr . AND expr [ RPAREN OR DOT AND ]
## arith_expr -> expr . OR expr [ RPAREN OR DOT AND ]
## arith_expr -> expr . DOT expr [ RPAREN OR DOT AND ]
## primary_expr -> LPAREN expr . RPAREN [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

expected either a newline or an operator

main_fxn: LPAREN WHILE
##
## Ends in an error in state: 15.
##
## primary_expr -> LPAREN . expr RPAREN [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

expected expression

main_fxn: NEWLINE RPAREN
##
## Ends in an error in state: 88.
##
## stmt_list -> NEWLINE . stmt_list [ EOF ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

expected a statement

main_fxn: NOT WEST WHILE
##
## Ends in an error in state: 41.
##
## arith_expr -> expr . AND expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## arith_expr -> expr . OR expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## arith_expr -> expr . DOT expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## arith_expr -> NOT expr . [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## NOT expr
##

expected either a newline or an operator

main_fxn: NOT WHILE
##
## Ends in an error in state: 13.
##
## arith_expr -> NOT . expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

expected expression

main_fxn: RPAREN
##
## Ends in an error in state: 87.
##
## main_fxn' -> . main_fxn [ # ]
##
## The known suffix of the stack is as follows:
##
##

expected a statement

main_fxn: WEST AND WEST WHILE
##
## Ends in an error in state: 34.
##
## arith_expr -> expr . AND expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## arith_expr -> expr AND expr . [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## arith_expr -> expr . OR expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## arith_expr -> expr . DOT expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

expected either a newline or an operator

main_fxn: WEST AND WHILE
##
## Ends in an error in state: 33.
##
## arith_expr -> expr AND . expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## expr AND
##

expected expression

main_fxn: WEST DOT WHILE
##
## Ends in an error in state: 30.
##
## arith_expr -> expr DOT . expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

expected expression

main_fxn: WEST NEWLINE RPAREN
##
## Ends in an error in state: 90.
##
## stmt_list -> stmt . stmt_list [ EOF ]
##
## The known suffix of the stack is as follows:
## stmt
##

expected statement

main_fxn: WEST OR WEST WHILE
##
## Ends in an error in state: 29.
##
## arith_expr -> expr . AND expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## arith_expr -> expr . OR expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## arith_expr -> expr OR expr . [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
## arith_expr -> expr . DOT expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

expected either a newline or an operator

main_fxn: WEST OR WHILE
##
## Ends in an error in state: 28.
##
## arith_expr -> expr OR . expr [ RPAREN OR NEWLINE DOT COMMA COLON AND ]
##
## The known suffix of the stack is as follows:
## expr OR
##

expected expression

main_fxn: WEST WHILE
##
## Ends in an error in state: 54.
##
## arith_expr -> expr . AND expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . OR expr [ OR NEWLINE DOT AND ]
## arith_expr -> expr . DOT expr [ OR NEWLINE DOT AND ]
## expression_stmt -> expr . NEWLINE [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF ELSE ELIF EAST DEF DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## expr
##

expected either a newline or an operator

main_fxn: WHILE WEST COLON WHILE
##
## Ends in an error in state: 46.
##
## while_stmt -> WHILE expr COLON . suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## WHILE expr COLON
##

expected a statement or a newline followed by a new indentation level

main_fxn: WHILE WEST WHILE
##
## Ends in an error in state: 45.
##
## arith_expr -> expr . AND expr [ OR DOT COLON AND ]
## arith_expr -> expr . OR expr [ OR DOT COLON AND ]
## arith_expr -> expr . DOT expr [ OR DOT COLON AND ]
## while_stmt -> WHILE expr . COLON suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## WHILE expr
##

expected one of `:`, `.`, or an operator

main_fxn: WHILE WHILE
##
## Ends in an error in state: 44.
##
## while_stmt -> WHILE . expr COLON suite [ WHILE WEST TRUE SOUTH SELF RIGHT NOT NORTH NEWLINE LPAREN LEFT INT IF ID HERE FALSE EOF EAST DEDENT AHEAD ]
##
## The known suffix of the stack is as follows:
## WHILE
##

expected expression

fxns: DEF ID LPAREN SELF RPAREN COLON AHEAD NEWLINE WHILE
##
## Ends in an error in state: 82.
##
## newline_or_fxn_list -> fxn . newline_or_fxn_list [ EOF ]
##
## The known suffix of the stack is as follows:
## fxn
##

expected `def`

fxns: DEF ID LPAREN SELF RPAREN COLON WHILE
##
## Ends in an error in state: 7.
##
## fxn -> DEF ID LPAREN SELF RPAREN COLON . suite [ NEWLINE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID LPAREN SELF RPAREN COLON
##

expected either a statement or a new indentation level

fxns: DEF ID LPAREN SELF RPAREN WHILE
##
## Ends in an error in state: 6.
##
## fxn -> DEF ID LPAREN SELF RPAREN . COLON suite [ NEWLINE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID LPAREN SELF RPAREN
##

expected `:`

fxns: DEF ID LPAREN SELF WHILE
##
## Ends in an error in state: 5.
##
## fxn -> DEF ID LPAREN SELF . RPAREN COLON suite [ NEWLINE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID LPAREN SELF
##

expected ')'

fxns: DEF ID LPAREN WHILE
##
## Ends in an error in state: 4.
##
## fxn -> DEF ID LPAREN . SELF RPAREN COLON suite [ NEWLINE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID LPAREN
##

expected `self`

fxns: DEF ID WHILE
##
## Ends in an error in state: 3.
##
## fxn -> DEF ID . LPAREN SELF RPAREN COLON suite [ NEWLINE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF ID
##

expected `(`

fxns: DEF WHILE
##
## Ends in an error in state: 2.
##
## fxn -> DEF . ID LPAREN SELF RPAREN COLON suite [ NEWLINE EOF DEF ]
##
## The known suffix of the stack is as follows:
## DEF
##

expected an identifier

fxns: NEWLINE WHILE
##
## Ends in an error in state: 1.
##
## newline_or_fxn_list -> NEWLINE . newline_or_fxn_list [ EOF ]
##
## The known suffix of the stack is as follows:
## NEWLINE
##

expected `def`

fxns: WHILE
##
## Ends in an error in state: 0.
##
## fxns' -> . fxns [ # ]
##
## The known suffix of the stack is as follows:
##
##

expected `def`
